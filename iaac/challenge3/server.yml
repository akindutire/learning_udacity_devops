Description: "SERVER Resources"
Parameters:
  EnvironmentName:
    Type: String
Resources:
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LBSG
      GroupDescription: 'Security groups for app load balancers'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: 
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID
      Tags:
        - Key: Name
          Value: Load balance SG
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebSG
      GroupDescription: 'Security groups for web apps or ec2 instances'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      VpcId: 
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID
      Tags:
        - Key: Name
          Value: WebServer Instance SecGrp
  
  DevServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Install docker
            apt-get update
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
            apt-get update
            apt-get install -y docker-ce
            usermod -aG docker ubuntu
            docker run -p 8080:80 tomcat:8.0
        SecurityGroups:
          - !Ref WebSecurityGroup
        ImageId: 'ami-09d56f8956ab235b3'
        InstanceType: t3.medium
        # IamInstanceProfile: !Ref EC2InstanceProfile
        #KeyName: test
        #AssociatePublicIpAddress: true
        BlockDeviceMappings:
          - DeviceName: '/dev/sdk'
            Ebs:
              VolumeSize: 8
              DeleteOnTermination: true

  DevLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-Pub-Net1
        - Fn::ImportValue: !Sub ${EnvironmentName}-Pub-Net2
      SecurityGroups:
        - !Ref LBSecurityGroup

  DevTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: DevLB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID

  LBListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: DevTargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref DevLB
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DevTargetGroup
  LBListerner1Rule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: LBListener1
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DevTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LBListener1
      Priority: 1
          
  DevServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: DevServerLaunchConfig
    Properties:
        VPCZoneIdentifier:
          - Fn::ImportValue:
              !Sub ${EnvironmentName}-Priv-Nets
        LaunchConfigurationName: !Ref DevServerLaunchConfig 
        MinSize: 1
        MaxSize: 4
        TargetGroupARNs: 
          - !Ref DevTargetGroup

